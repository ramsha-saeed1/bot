# -*- coding: utf-8 -*-
"""st.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YTuSCvbiUWUKz1dI3RvsbY4UZdPV4JTA
"""

# Commented out IPython magic to ensure Python compatibility.
# pip install --upgrade --quiet  langchain langchain-community langchain-core langchainhub langchain-chroma langchain-experimental

'''
pip install pandas
pip install chromadb==0.4.22
pip install sentence-transformers
'''

from langchain_experimental.agents import create_pandas_dataframe_agent
import pandas as pd
from langchain_google_genai import GoogleGenerativeAI
from langchain_google_genai.chat_models import ChatGoogleGenerativeAI

api_key = 'AIzaSyCPKgdSzX6H7E2DZUOPFXgB3tvGSSkMylg'
llm = ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", google_api_key=api_key, temperature=0.2)
'''
pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
pip install -qU langchain-google-vertexai
pip install -q langchain-google-genai
pip install --upgrade -q langchain-google-genai
pip show langchain-google-genai
pip install -q google-generativeai
'''

from langchain_experimental.agents import create_pandas_dataframe_agent
import pandas as pd
from langchain_google_genai import GoogleGenerativeAI
from langchain_google_genai.chat_models import ChatGoogleGenerativeAI

api_key = 'AIzaSyCPKgdSzX6H7E2DZUOPFXgB3tvGSSkMylg'
# llm = ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", google_api_key=api_key, temperature=0.2)

# from openai import OpenAI
import streamlit as st

st.title("ChatGPT-like clone")

client = ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", google_api_key=api_key, temperature=0.2)

# if "openai_model" not in st.session_state:
#     st.session_state["openai_model"] = "gpt-3.5-turbo"

if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("What is up?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        stream = client.chat.completions.create(
            model=st.session_state["openai_model"],
            messages=[
                {"role": m["role"], "content": m["content"]}
                for m in st.session_state.messages
            ],
            stream=True,
        )
        response = st.write_stream(stream)
    st.session_state.messages.append({"role": "assistant", "content": response})
